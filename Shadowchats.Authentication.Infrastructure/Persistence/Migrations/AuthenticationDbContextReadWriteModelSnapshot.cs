// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Shadowchats.Authentication.Infrastructure.Persistence.AuthenticationDbContext;

#nullable disable

namespace Shadowchats.Authentication.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AuthenticationDbContextReadWrite))]
    partial class AuthenticationDbContextReadWriteModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Shadowchats.Authentication.Core.Domain.Aggregates.Account", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.HasKey("Guid");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("Shadowchats.Authentication.Core.Domain.Aggregates.Session", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("IX_Sessions_AccountId");

                    b.HasIndex("RefreshToken")
                        .IsUnique()
                        .HasDatabaseName("IX_Sessions_RefreshToken");

                    b.ToTable("Sessions", (string)null);
                });

            modelBuilder.Entity("Shadowchats.Authentication.Core.Domain.Aggregates.Account", b =>
                {
                    b.OwnsOne("Shadowchats.Authentication.Core.Domain.ValueObjects.Credentials", "Credentials", b1 =>
                        {
                            b1.Property<Guid>("AccountGuid")
                                .HasColumnType("uuid");

                            b1.Property<string>("Login")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Login");

                            b1.Property<string>("PasswordHash")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PasswordHash");

                            b1.HasKey("AccountGuid");

                            b1.HasIndex("Login")
                                .IsUnique()
                                .HasDatabaseName("IX_Accounts_Login");

                            b1.ToTable("Accounts");

                            b1.WithOwner()
                                .HasForeignKey("AccountGuid");
                        });

                    b.Navigation("Credentials")
                        .IsRequired();
                });

            modelBuilder.Entity("Shadowchats.Authentication.Core.Domain.Aggregates.Session", b =>
                {
                    b.HasOne("Shadowchats.Authentication.Core.Domain.Aggregates.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
